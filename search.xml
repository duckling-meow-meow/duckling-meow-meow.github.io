<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[二叉树的数字特征]]></title>
    <url>%2F2019%2F08%2F15%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81%2F</url>
    <content type="text"><![CDATA[各种节点个数问题。 深度为k的节点至多有2k个； ​ 不难理解。 含n个节点，高度为h的二叉树中节点总数h < n < 2h+1; ​ 注：空树的高度是-1，只有一个根节点的树高度是0。那么n=h+1时退化为一条链，n=2h+1则为满二叉树。 设度数为0,1,2的节点各有n0,n1,n2个，边数=n-1=n1+2n2; ​ n-1是因为除了根节点以外，每一个节点都对应了一条边；n1+2n2则不难理解。 设度数为0,2的节点各有n0,n2个，则叶节点数n0=n2+1; ​ 用数学归纳法证明。在n=1的时候显然成立，假设在n2=m-1的时候成立，接下来我们证明n2=m的时候结论成立。 ​ n2=m的树相对于n2=m-1的树即新增了一个2度节点，为了新增一个2度节点，我们就要增添原来度为0或1的节点的孩子，所以按照增添叶节点所属父节点的性质不同分为两种情况：父节点原来是叶节点；父节点原来只有一个孩子。 ​ 为了便于理解，我们以m-1=2，m=3的情况为例，作图示意。 ​ 可见，第一种情况原叶节点个数不变的基础上增添了一个叶节点，总体是增加了一个叶节点；第二种情况原叶节点的个数减少了一个的基础上增添了两个叶节点，总体还是增加了一个叶节点。 ​ 所以从n2=m-1到n2=m2度节点和叶节点都是增加了一个，即n2=m时结论成立。 ​ 注：其实从n2=m-1的树变化到n2=m的树不止这两种情况，还可以在继续向下添加无数个度为1的节点，但是本质不变，所以不用另作讨论。 节点数n=n0+n1+n2=1+n1+2n2; ​ 得结论4.自然得结论5。 满二叉树，内部节点总数+1=叶节点总数； ​ 得结论4.自然得结论6，因为满二叉树内部节点都是2度节点。 ​ 或者使用数列求和的方法证明，因为我们知道每一层节点的个数，即第k层有2k个节点。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>数据结构</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写作格式]]></title>
    <url>%2F2019%2F06%2F05%2F%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[冒号、短横都使用英文符号，他们后面的空格不要省略。总之，尽量保持规范。 尝试的时候发现好像只有第一次的时候使用中文符号会使格式出错，后面我再修改都不影响了，反正以后都写英文符号就是了。 图片放大功能测试 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hello</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Hexo</category>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hello</tag>
      </tags>
  </entry>
</search>
